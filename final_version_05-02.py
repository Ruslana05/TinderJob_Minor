import aiosqlite
import logging
import asyncio
import json
import os
import urllib3
from aiogram.filters.state import StateFilter
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import KeyboardButtonPollType, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, timedelta
from typing import Callable, Any, Awaitable
from urllib3.exceptions import InsecureRequestWarning
# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
urllib3.disable_warnings(InsecureRequestWarning)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(force=True, level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logging.basicConfig()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
token = '7641096416:AAH1DOQmRe0lJdlW3NK-eGXqp4LRlKslHyI'
bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á (—á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
active_tasks = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
class Form(StatesGroup):
    name = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û
    telephone = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞

async def create_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                last_name TEXT,
                first_name TEXT,
                telephone_number TEXT
            )
        """)
        await db.commit()

async def add_user_to_db(user_id, last_name, first_name, telephone_number):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect("users.db") as db:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        async with db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()
        if user:
            print(f"User {user_id} already exists. Updating info.")
            await db.execute("UPDATE users SET last_name = ?, first_name = ?, telephone_number = ? WHERE user_id = ?",
                             (last_name, first_name, telephone_number, user_id))
        else:
            print(f"Adding new user {user_id} to the database.")
            await db.execute("INSERT INTO users (user_id, last_name, first_name, telephone_number) VALUES (?, ?, ?, ?)",
                             (user_id, last_name, first_name, telephone_number))
        await db.commit()

async def get_user(user_id):
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()
            if user:
                print(f"User {user_id} found: {user}")
            else:
                print(f"User {user_id} not found.")
            return user

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegistrationMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[Any], Awaitable[Any]], event: Message | CallbackQuery, data: dict):
        user_id = event.from_user.id

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if isinstance(event, Message) and event.text == "/start":
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fsm_context = data.get('state', None)
        if fsm_context:
            state = await fsm_context.get_state()
            if state in [Form.name.state, Form.telephone.state]:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Middleware
                return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
                user = await cursor.fetchone()

        if not user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if isinstance(event, Message):
                await event.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            elif isinstance(event, CallbackQuery):
                await event.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Middleware –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.message.middleware(RegistrationMiddleware())
dp.callback_query.middleware(RegistrationMiddleware())

def check_name(name: str):
    return len(name.split()) == 3

def check_telephone(telephone: str):
    return telephone.isdigit()

@dp.message(F.text, Form.name)
async def inputfio(message: Message, state: FSMContext):
    if not check_name(message.text):
        await message.answer(f'–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
        return
    await message.answer(f'–§–ò–û –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏:')
    await state.update_data(name=message.text)
    await state.set_state(Form.telephone)

@dp.message(F.text, Form.telephone)
async def input_telephone(message: Message, state: FSMContext):
    if not check_telephone(message.text):
        await message.answer(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "89995550101")')
        return
    data = await state.get_data()
    await add_user_to_db(message.from_user.id, data['name'], message.from_user.first_name, message.text)
    await message.answer(f'–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n–§–ò–û - {data["name"]} \n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {message.text} \n–≤–∞—à id = {message.from_user.id}')
    await message.answer(f'‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è –º–∏—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π. \nüí• –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é", —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.')
    await state.clear()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –§–ò–û."""
@dp.message(CommandStart(), State(None))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, /menu1 –∏–ª–∏ /menu2 –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
        data = await state.get_data()
        if "start_shown" not in data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –±–æ—Ç —Å –Ω–µ—à–∞–±–ª–æ–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏. "
                "–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã, "
                "–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ ‚Äî –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤! "
                "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å —Å –Ω–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è :)\n\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏), "
                "—ç—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
                "/menu1 ‚Äî –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.\n"
                "/menu2 ‚Äî –º–µ–Ω—é –¥–ª—è –ø–æ–º–æ—â–∏, –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.\n\n"
                "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ! ü§ó\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑."
            )
            await state.update_data(start_shown=True)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
            return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤–≤–µ–ª /start ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(f'–ò—Ç–∞–∫, {message.from_user.first_name}! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
        await state.set_state(Form.name)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –§–ò–û

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message(Command("menu1"), State(None))
async def cmd_menu1(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"))
    builder.add(KeyboardButton(text="üôå –ú–æ–∏ –º—ç—Ç—á–∏"))
    builder.add(KeyboardButton(text="ü™™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
    builder.add(KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"))
    builder.adjust(2, 2, 1)
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(Command("menu2"))
async def cmd_menu2(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üõ†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"))
    builder.add(KeyboardButton(text="üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"))
    keyboard = builder.as_markup(resize_keyboard=True)
    await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–ù–û–ü–ö–ê 1 "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
@dp.message(F.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def meditation_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –º–µ–¥–∏—Ç–∞—Ü–∏–∏."""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–î–∏–∑–ª–∞–π–∫"))
    builder.add(KeyboardButton(text="–õ–∞–π–∫"))
    builder.add(KeyboardButton(text="–õ–∞–π–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"))
    builder.add(KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å"))
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    keyboard = builder.as_markup(resize_keyboard=True)

    await message.answer('‚ú® –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π ‚ú® \n\n–ê –ø–æ–∫–∞ –º–æ–∂–Ω–æ —Ç—ã–∫–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" :)', reply_markup=keyboard)

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
@dp.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def return_to_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    await cmd_menu1(message)
# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ò 1 "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"

# –ö–ù–û–ü–ö–ê 2 "üôå –ú–æ–∏ –º—ç—Ç—á–∏"
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
category_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞ ‚Ññ1, –∫–æ–º–ø–∞–Ω–∏—è A")],
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞ ‚Ññ2, –∫–æ–º–ø–∞–Ω–∏—è B")],
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞ ‚Ññ3, –∫–æ–º–ø–∞–Ω–∏—è C")],
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞ ‚ÑñN, –∫–æ–º–ø–∞–Ω–∏—è N")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(lambda message: message.text == "üôå –ú–æ–∏ –º—ç—Ç—á–∏")
async def handle_motivation_button(message: types.Message):
    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    await message.answer('‚ú® –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å –≤–∞–º–∏ –º—ç—Ç—á‚ú® \n\n–ê –ø–æ–∫–∞ –º–æ–∂–Ω–æ —Ç—ã–∫–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" :)', reply_markup=category_keyboard)

@dp.message(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def return_to_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    await cmd_menu1(message)
# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ò 2 "üôå –ú–æ–∏ –º—ç—Ç—á–∏"

# –ö–ù–û–ü–ö–ê "ü™™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø–∏—Å–∞–Ω–∏–µ)
def load_profile_from_file(user_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
    file_name = f'about_{user_id}.txt'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
    if os.path.exists(file_name):
        with open(file_name, 'r', encoding='utf-8') as file:
            return file.read()
    return None  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_skills_from_file(user_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
    file_name = f'skills_{user_id}.json'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å —Å–∫–∏–ª–ª–∞–º–∏
    if os.path.exists(file_name):
        with open(file_name, 'r', encoding='utf-8') as file:
            try:
                skills = json.load(file)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                for skill in skills:
                    if 'skill' not in skill or 'note' not in skill:
                        raise ValueError(f"–°–∫–∏–ª–ª {skill} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return skills
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞ {file_name}.")
            except ValueError as e:
                print(e)
    return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


# –°—Ç–µ–π—Ç—ã FSM
class ProfileStates(StatesGroup):
    waiting_for_profile_action = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å–∫–∏–ª–ª—ã
    waiting_for_skill = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–ª–ª–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü™™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
@dp.message(F.text == "ü™™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def view_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile = load_profile_from_file(user_id)
    if not profile:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–ª–ª—ã
    skills = load_skills_from_file(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å–∫–∏–ª–ª—ã
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"))
    if skills:
        builder.add(KeyboardButton(text="2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–∏–ª–ª—ã"))
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    keyboard = builder.as_markup(resize_keyboard=True)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=keyboard)
    await state.set_state(ProfileStates.waiting_for_profile_action)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–∏–ª—è: –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å–∫–∏–ª–ª—ã
@dp.message(StateFilter(ProfileStates.waiting_for_profile_action))
async def process_profile_action(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    action = message.text

    if action == "1Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = load_profile_from_file(user_id)
        if profile:
            await message.answer(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:\n\n{profile}")
        else:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")

    elif action == "2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–∏–ª–ª—ã":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–ª–ª—ã
        skills = load_skills_from_file(user_id)
        if not skills:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∏–ª–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª—å.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–∏–ª–ª–∞
        builder = ReplyKeyboardBuilder()
        for skill in skills:
            skill_button = KeyboardButton(text=skill['skill'])
            builder.add(skill_button)

        builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
        keyboard = builder.as_markup(resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å —Å–∫–∏–ª–ª–∞–º–∏
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–ª–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", reply_markup=keyboard)
        await state.set_state(ProfileStates.waiting_for_skill)

    else:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–ª–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message(StateFilter(ProfileStates.waiting_for_skill))
async def view_skill_comment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    skill_name = message.text

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–ª–ª—ã
    skills = load_skills_from_file(user_id)
    skill = next((s for s in skills if s['skill'] == skill_name), None)

    if skill:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∫–∏–ª–ª—É
        await message.answer(f"‚ñ´Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å–∫–∏–ª–ª–∞ –æ—Ç 1 –¥–æ 10 '{skill_name}':  {skill['level']}")
        await message.answer(f"\n‚ñ´Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∫–∏–ª–ª—É '{skill_name}':\n{skill['note']}")
    else:
        if message.text not in ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É
            await message.answer("‚ùó –°–∫–∏–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–ª–ª–æ–≤.")
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            await message.answer("‚ùó –°–∫–∏–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–∏–ª–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'.")

# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ò "ü™™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
user_about_file = 'about_{}.txt'
user_skills_file = 'skills_{}.json'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class Form1(StatesGroup):
    choosing_role = State()  # –í—ã–±–æ—Ä —Ä–æ–ª–∏ (–°–æ–∏—Å–∫–∞—Ç–µ–ª—å/–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å)
    waiting_for_education = State()  # –í–≤–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    waiting_for_experience = State()  # –í–≤–æ–¥ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
    waiting_for_format = State()  # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã (–æ—Ñ–∏—Å, —É–¥–∞–ª—ë–Ω–∫–∞ –∏ —Ç. –¥.)
    waiting_for_salary = State()  # –í–≤–æ–¥ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    waiting_for_something = State()  # –í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
    waiting_for_skill = State()  # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–∏–ª–ª–∞
    waiting_for_skill_level = State()  # –í–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —Å–∫–∏–ª–ª–æ–º (1-10)
    waiting_for_skill_note = State()  # –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å–∫–∏–ª–ª—É

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_existing_profile(user_id):
    return os.path.exists(user_about_file.format(user_id))


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∫–µ—Ç—ã
async def show_role_selection(message: Message):
    user_id = message.from_user.id
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî∂ –°–æ–∏—Å–∫–∞—Ç–µ–ª—å", callback_data="applicant")],
        [InlineKeyboardButton(text="üî∑ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="employer")]
    ])

    #if check_existing_profile(user_id):
        #builder.inline_keyboard.append([InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="reset")])

    builder.inline_keyboard.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu2")])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:", reply_markup=builder)


@dp.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def fill_form(message: Message, state: FSMContext):
    await show_role_selection(message)
    await state.set_state(Form1.choosing_role)

# –ö–ù–û–ü–ö–ê –°–û–ò–°–ö–ê–¢–ï–õ–¨
@dp.callback_query(F.data == "applicant")
async def applicant_selected(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(role="–°–æ–∏—Å–∫–∞—Ç–µ–ª—å")

    if check_existing_profile(user_id):
        with open(user_about_file.format(user_id), 'r', encoding='utf-8') as file:
            profile_info = file.read()
        await call.message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω:\n\n{profile_info}",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                      [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="reset")]
                                  ]))
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )

        await call.message.answer("–õ–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:", reply_markup=keyboard)

        return

    await call.message.answer("üìö –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:")
    await state.set_state(Form1.waiting_for_education)


@dp.callback_query(F.data == "reset")
async def reset_profile(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    about_path = user_about_file.format(user_id)
    skills_path = user_skills_file.format(user_id)

    if os.path.exists(about_path):
        os.remove(about_path)
    if os.path.exists(skills_path):
        os.remove(skills_path)

    await call.message.answer("üóë –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
    await applicant_selected(call, state)


@dp.message(Form1.waiting_for_education)
async def process_education(message: Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer("üíº –û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(Form1.waiting_for_experience)


@dp.message(Form1.waiting_for_experience)
async def process_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("üìù –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:")
    await state.set_state(Form1.waiting_for_something)


@dp.message(Form1.waiting_for_something)
async def process_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–∏—Å", callback_data="format_office")],
        [InlineKeyboardButton(text="–ì–∏–±—Ä–∏–¥", callback_data="format_hybrid")],
        [InlineKeyboardButton(text="–£–¥–∞–ª—ë–Ω–Ω–æ", callback_data="format_remote")],
        [InlineKeyboardButton(text="–ù–∞ –ø—Ä–æ–µ–∫—Ç", callback_data="format_project")]
    ])

    await message.answer("üè¢ –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=keyboard)
    await state.set_state(Form1.waiting_for_format)


@dp.callback_query(Form1.waiting_for_format)
async def process_format(call: CallbackQuery, state: FSMContext):
    format_mapping = {
        "format_office": "–û—Ñ–∏—Å",
        "format_hybrid": "–ì–∏–±—Ä–∏–¥",
        "format_remote": "–£–¥–∞–ª—ë–Ω–Ω–æ",
        "format_project": "–ù–∞ –ø—Ä–æ–µ–∫—Ç"
    }
    selected_format = format_mapping.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await state.update_data(preferred_format=selected_format)
    await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:")
    await state.set_state(Form1.waiting_for_salary)


@dp.message(Form1.waiting_for_salary)
async def process_salary(message: Message, state: FSMContext):
    await state.update_data(salary=message.text)

    data = await state.get_data()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª about_{user_id}.txt
    with open(user_about_file.format(user_id), 'w', encoding='utf-8') as file:
        file.write(
            f"üî∏ –°—Ç–∞—Ç—É—Å: {data.get('role')}\n"
            f"üî∏ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data['education']}\n"
            f"üî∏ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {data['experience']}\n"
            f"üî∏ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {data['preferred_format']}\n"
            f"üî∏ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {data['salary']}\n"
        )

    await message.answer("‚úÖ –†–∞–∑–¥–µ–ª –æ —Å–µ–±–µ –∑–∞–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å–∫–∏–ª–ª—ã.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞:")
    await state.set_state(Form1.waiting_for_skill)

@dp.message(Form1.waiting_for_skill)
async def process_skill(message: Message, state: FSMContext):
    await state.update_data(skill=message.text)
    if not message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        await message.answer("üî¢ –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —ç—Ç–∏–º —Å–∫–∏–ª–ª–æ–º (1-10):")
        await state.set_state(Form1.waiting_for_skill_level)
    else:
        await finish_profile(message, state)

@dp.message(Form1.waiting_for_skill_level)
async def process_skill_level(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return
    await state.update_data(skill_level=message.text)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∫–∏–ª–ª—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
    await state.set_state(Form1.waiting_for_skill_note)

@dp.message(Form1.waiting_for_skill_note)
async def process_skill_note(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    skill_entry = {
        "skill": data["skill"],
        "level": data["skill_level"],
        "note": message.text
    }
    file_path = user_skills_file.format(user_id)
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            skills = json.load(file)
    else:
        skills = []
    skills.append(skill_entry)
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(skills, file, ensure_ascii=False, indent=4)
    await message.answer("‚úÖ –°–∫–∏–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    await state.set_state(Form1.waiting_for_skill)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–æ–≤–∞ "–ì–æ—Ç–æ–≤–æ"
@dp.message(Form1.waiting_for_skill)
async def finish_profile(message: Message, state: FSMContext):
    if message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        user_id = message.from_user.id
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = await get_user(user_id)
        if user:
            last_name, first_name, telephone_number = user[1], user[2], user[3]  # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        else:
            last_name, first_name, telephone_number = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        profile_info = f"–§–ò–û: {last_name} \n–¢–µ–ª–µ—Ñ–æ–Ω: {telephone_number}\n"
        profile_info += f"üî∏ –°—Ç–∞—Ç—É—Å: {data.get('role')}\n"
        profile_info += f"üî∏ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data.get('education')}\n"
        profile_info += f"üî∏ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {data.get('experience')}\n"
        profile_info += f"üî∏ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {data.get('work_format')}\n"  # –î–æ–±–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
        profile_info += f"üî∏ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {data.get('expected_salary')}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞

        profile_info += "    \n–°–∫–∏–ª–ª—ã:\n"

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–ª–ª–æ–≤
        skills_file = user_skills_file.format(user_id)
        if os.path.exists(skills_file):
            with open(skills_file, 'r', encoding='utf-8') as file:
                skills = json.load(file)
                for skill in skills:
                    profile_info += f"üî∏ {skill['skill']} (–£—Ä–æ–≤–µ–Ω—å:  {skill['level']}) - {skill['note']}\n"

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω, {first_name}! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n{profile_info}", reply_markup=keyboard)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
@dp.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await cmd_menu1(message)
# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ò –°–û–ò–°–ö–ê–¢–ï–õ–¨

# –ö–ù–û–ü–ö–ê –†–ê–ë–û–¢–ê–î–ê–¢–ï–õ–¨
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
class Form2(StatesGroup):
    choosing_role = State()  # –í—ã–±–æ—Ä —Ä–æ–ª–∏ (–°–æ–∏—Å–∫–∞—Ç–µ–ª—å/–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å)
    waiting_for_company_description2 = State()  # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    waiting_for_team_description2 = State()  # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/—Ä–∞–±–æ—Ç—ã
    waiting_for_format2 = State()  # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã (–æ—Ñ–∏—Å, —É–¥–∞–ª—ë–Ω–∫–∞ –∏ —Ç. –¥.)
    waiting_for_salary2 = State()  # –í–≤–æ–¥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
    waiting_for_skill2 = State()  # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–∏–ª–ª–∞
    waiting_for_skill_level2 = State()  # –í–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —Å–∫–∏–ª–ª–æ–º (1-10)
    waiting_for_skill_note2 = State()  # –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å–∫–∏–ª–ª—É

@dp.callback_query(F.data == "employer")
async def employer_selected(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(role="–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")

    if check_existing_profile(user_id):
        with open(user_about_file.format(user_id), 'r', encoding='utf-8') as file:
            profile_info2 = file.read()
        await call.message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω:\n\n{profile_info2}",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                      [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="reset2")]
                                  ]))
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )

        await call.message.answer("–õ–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:", reply_markup=keyboard)
        return
    await call.message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(Form2.waiting_for_company_description2)


@dp.callback_query(F.data == "reset2")
async def reset2_profile(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    about_path = user_about_file.format(user_id)
    skills_path = user_skills_file.format(user_id)

    if os.path.exists(about_path):
        os.remove(about_path)
    if os.path.exists(skills_path):
        os.remove(skills_path)

    await call.message.answer("üóë –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
    await employer_selected(call, state)


@dp.message(Form2.waiting_for_company_description2)
async def process_company_description2(message: Message, state: FSMContext):
    await state.update_data(company_description2=message.text)
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(Form2.waiting_for_team_description2)


@dp.message(Form2.waiting_for_team_description2)
async def process_team_description2(message: Message, state: FSMContext):
    await state.update_data(team_description2=message.text)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–∏—Å", callback_data="format_office2")],
        [InlineKeyboardButton(text="–ì–∏–±—Ä–∏–¥", callback_data="format_hybrid2")],
        [InlineKeyboardButton(text="–£–¥–∞–ª—ë–Ω–Ω–æ", callback_data="format_remote2")],
        [InlineKeyboardButton(text="–ù–∞ –ø—Ä–æ–µ–∫—Ç", callback_data="format_project2")]
    ])

    await message.answer("üè¢ –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è?", reply_markup=keyboard)
    await state.set_state(Form2.waiting_for_format2)


@dp.callback_query(Form2.waiting_for_format2)
async def process_format2(call: CallbackQuery, state: FSMContext):
    format_mapping = {
        "format_office2": "–û—Ñ–∏—Å",
        "format_hybrid2": "–ì–∏–±—Ä–∏–¥",
        "format_remote2": "–£–¥–∞–ª—ë–Ω–Ω–æ",
        "format_project2": "–ù–∞ –ø—Ä–æ–µ–∫—Ç"
    }
    selected_format = format_mapping.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await state.update_data(preferred_format2=selected_format)
    await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:")
    await state.set_state(Form2.waiting_for_salary2)

@dp.message(Form2.waiting_for_salary2)
async def process_salary2(message: Message, state: FSMContext):
    await state.update_data(salary2=message.text)

    data = await state.get_data()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª about_{user_id}.txt
    with open(user_about_file.format(user_id), 'w', encoding='utf-8') as file:
        file.write(
            f"üîπ –°—Ç–∞—Ç—É—Å: {data.get('role')}\n" 
            f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {data['company_description2']}\n"
            f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/—Ä–∞–±–æ—Ç—ã: {data['team_description2']}\n"
            f"üîπ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {data['preferred_format2']}\n"
            f"üîπ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {data['salary2']}\n"
        )

    await message.answer("‚úÖ –†–∞–∑–¥–µ–ª –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å–∫–∏–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞:")
    await state.set_state(Form2.waiting_for_skill2)


@dp.message(Form2.waiting_for_skill2)
async def process_skill2(message: Message, state: FSMContext):
    await state.update_data(skill=message.text)
    if not message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        await message.answer("üî¢ –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —ç—Ç–∏–º —Å–∫–∏–ª–ª–æ–º (1-10):")
        await state.set_state(Form2.waiting_for_skill_level2)
    else:
        await finish_profile2(message, state)


@dp.message(Form2.waiting_for_skill_level2)
async def process_skill_level2(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return
    await state.update_data(skill_level=message.text)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∫–∏–ª–ª—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
    await state.set_state(Form2.waiting_for_skill_note2)


@dp.message(Form2.waiting_for_skill_note2)
async def process_skill_note2(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    skill_entry = {
        "skill": data["skill"],
        "level": data["skill_level"],
        "note": message.text
    }
    file_path = user_skills_file.format(user_id)
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            skills = json.load(file)
    else:
        skills = []
    skills.append(skill_entry)
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(skills, file, ensure_ascii=False, indent=4)
    await message.answer("‚úÖ –°–∫–∏–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    await state.set_state(Form2.waiting_for_skill2)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–æ–≤–∞ "–ì–æ—Ç–æ–≤–æ"
@dp.message(Form2.waiting_for_skill2)
async def finish_profile2(message: Message, state: FSMContext):
    if message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        user_id = message.from_user.id
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = await get_user(user_id)
        if user:
            last_name, first_name, telephone_number = user[1], user[2], user[3]  # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        else:
            last_name, first_name, telephone_number = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        profile_info2 = f"–§–ò–û: {last_name} \n–¢–µ–ª–µ—Ñ–æ–Ω: {telephone_number}\n"
        profile_info2 += f"üîπ –°—Ç–∞—Ç—É—Å: {data.get('role')}\n"
        profile_info2 += f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {data.get('company_description2')}\n"
        profile_info2 += f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/—Ä–∞–±–æ—Ç—ã: {data.get('team_description2')}\n"
        profile_info2 += f"üîπ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {data.get('preferred_format2')}\n"  # –î–æ–±–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
        profile_info2 += f"üîπ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {data.get('salary2')}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞

        profile_info2 += "    \n–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫–∏–ª–ª—ã:\n"

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–ª–ª–æ–≤
        skills_file = user_skills_file.format(user_id)
        if os.path.exists(skills_file):
            with open(skills_file, 'r', encoding='utf-8') as file:
                skills = json.load(file)
                for skill in skills:
                    profile_info2 += f"üîπ {skill['skill']} (–£—Ä–æ–≤–µ–Ω—å:  {skill['level']}) - {skill['note']}\n"

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω, {first_name}! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n{profile_info2}", reply_markup=keyboard)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
@dp.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await cmd_menu1(message)

@dp.callback_query(F.data == "menu2")
async def back_to_menu(message: Message):
    await cmd_menu1(message)
# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–î–ê–¢–ï–õ–¨

# –ö–ù–û–ü–ö–ê "‚ÑπÔ∏è –û –±–æ—Ç–µ"
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def question(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await message.answer("‚ÑπÔ∏è –û –±–æ—Ç–µ: \n\nTinderJob ‚Äî —ç—Ç–æ –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤. \n–ú—ã —Å–æ–∑–¥–∞–ª–∏ –µ–≥–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏:\n\n‚ñ™Ô∏è –õ–µ–≥–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Å–∏–ª–∏–π –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–∞—à–µ–π –º–µ—á—Ç—ã.\n‚ñ™Ô∏è –ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–≤–ª–µ—á–µ–Ω–∏–µ–º –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º.\n\nüìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.\n/menu1 ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –º—ç—Ç—á–µ–π.\n/menu2 ‚Äî –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏, –≤–∫–ª—é—á–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.")
# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ê "‚ÑπÔ∏è –û –±–æ—Ç–µ"

# –ö–ù–û–ü–ö–ê "üõ†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
@dp.message(F.text == "üõ†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def meditation_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –º–µ–¥–∏—Ç–∞—Ü–∏–∏."""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    keyboard = builder.as_markup(resize_keyboard=True)
    await message.answer('‚ú® –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚ú® \n\n–ê –ø–æ–∫–∞ –Ω—É–∂–Ω–æ —Ç—ã–∫–Ω—É—Ç—å –Ω–∞ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" :)', reply_markup=keyboard)
# –ö–ù–û–ü–ö–ê –ö–ù–û–ü–ö–ò "üõ†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

# –ö–ù–û–ü–ö–ê "üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
FEEDBACK_FILE = 'feedbacks.json'
class UserStates(StatesGroup):
    leaving_feedback = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ JSON
def add_to_json(file_path, data):
    """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(file_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã
            with open(file_path, 'r', encoding='utf-8') as file:
                feedbacks = json.load(file)
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
            feedbacks = []
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        feedbacks.append(data)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(feedbacks, file, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"Error while saving feedback to JSON: {e}")
        raise

@dp.message(F.text == "üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def feedback_prompt(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.leaving_feedback)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@dp.message(UserStates.leaving_feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await cmd_menu1(message)
        return

    try:
        feedback = message.text
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        data = {"user_id": str(message.from_user.id), "feedback": feedback}

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ JSON
        add_to_json(FEEDBACK_FILE, data)

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ü´∂\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await cmd_menu1(message)

    except Exception as e:
        logging.error(f"Error saving feedback: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            await cmd_menu1(message)
        )
    finally:
        await state.clear()
# –ö–û–ù–ï–¶ –ö–ù–û–ü–ö–ê "üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message()
async def handle_message(message: Message, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä
    if user_data.get("conversation_ended"):
        # –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(f'–£–≤–∞–∂–∞–µ–º—ã–π {message.from_user.first_name}, –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç! \n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõ†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É". \n\n–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º üíå')
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await state.get_state()

        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        if current_state is None:
            await message.answer(f'–£–≤–∞–∂–∞–µ–º—ã–π {message.from_user.first_name}, –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç! \n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõ†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É". \n\n–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º üíå')
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –∑–Ω–∞—á–∏—Ç, –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
async def start_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞."""
    commands = [
        BotCommand(command='menu1', description='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        BotCommand(command='menu2', description='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏')
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await create_db()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    dp.startup.register(start_bot)
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞
    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...")
    finally:
        await bot.session.close()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
asyncio.run(main())